<?php

define ('CHAPTER_TAXONOMY_NAME', 'sections');

/**
 * Prints data in JSON
 * @param unknown $result
 */
function _olcapi_representation ($data) {

  header('Content-type: text/javascript');

  $result = json_encode($data);
  $result = array_key_exists('callback', $_GET)
          ? $_GET['callback'] . '(' . $result . ');'
		      : $result
		      ;
  
  echo $result;

  module_invoke_all('exit');
  exit;

}

function olcapi_menu() {

  $items = array();
  $items['api'] = array(
    'page callback' => '_olcapi_basepath',
  	'delivery callback' => '_olcapi_representation',
  	'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/chapter'] = array(
    'page callback' => '_olcapi_chapters',
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
  	'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/chapters'] = $items['api/chapter'];

  $items['api/chapter/%taxonomy_term'] = array(
    'page callback' => '_olcapi_chapter',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
  	'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/chapters/%taxonomy_term'] = $items['api/chapter/%taxonomy_term'];

  $items['api/section'] = array(
    'page callback' => '_olcapi_sections',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/sections'] = $items['api/section'];
  $items['api/booklet'] = $items['api/section'];
  $items['api/booklets'] = $items['api/section'];


  $items['api/section/%node'] = array(
    'page callback' => '_olcapi_section',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
  	'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/sections/%node'] = $items['api/section/%node'];


  $items['api/booklet/%node'] = array(
    'page callback' => '_olcapi_booklet',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/booklets/%node'] = $items['api/booklet/%node'];


  $items['api/node/%'] = array(
    'page callback' => '_olcapi_node',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/nodes/%'] = $items['api/node/%'];


  $items['api/file/%file'] = array(
    'page callback' => '_olcapi_file',
    'page arguments' => array(2),
    'delivery callback' => '_olcapi_representation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  	'file' => 'olcapi.inc',
  );
  $items['api/files/%file'] = $items['api/file/%file'];


  return $items;

}

function _olcapi_query_section_content_nodes ($group_gid, $node_type_array) {

  $query_result = db_query(
    '
      SELECT 
        n.type,
        n.nid
      FROM
        {og_membership} c inner join 
        {node} n on (
          c.gid = :group_gid
          and c.entity_type = :entity_type
          and c.etid = n.nid
          and n.type in (:node_types)
        )
    ', 
    array(
      ':group_gid' => $group_gid,
      ':entity_type' => 'node',
      ':node_types' => $node_type_array,
    )
  );

  return $query_result;

}

function _olcapi_query_content_instruction_nodes ($for_entity_nid, $group_gid = NULL) {
  
  // Get the instructions that reference a given node
  // If group GID is provided, then limit results to a given group
  
  $group_clause = !is_null($group_gid) ? '
    inner join
    {og_membership} c on (
      c.gid = :group_gid
      and c.entity_type = :entity_type
      and c.etid = instruct.nid
      and instruct.type = :instruct_type
    )
  ': '';
  
  $arguments = array(
    ':for_entity_nid' => $for_entity_nid,
  ) + (!is_null($group_gid) ? array(
    ':group_gid' => $group_gid,
    ':entity_type' => 'node',
    ':instruct_type' => 'instruction',
  ) : array());
  
  $query = '
    SELECT
      instruct.nid
    FROM
      {node} instruct inner join
      {field_data_field_for_entity} e on (
        instruct.nid = e.entity_id
      )'
      . $group_clause . '
    WHERE
      e.field_for_entity_target_id = :for_entity_nid
  ';
      
  $query_result = db_query($query, $arguments);
      
  return $query_result;

}

function _olcapi_group_by_parent_node (&$all_children, $field_to_parent) {
    
    $children = array();
    
    // Collect the parent nodes
    $parent_nids = array();
    foreach ($all_children as $child) {

      $parent_nids []= $child['node']->{$field_to_parent}['und'][0]['target_id']; 

    }

    $parent_nids = array_unique($parent_nids);
    
    // Load the parent nodes
    foreach ($parent_nids as $parent_nids) {
      $children[$parent_nids] = array(
        'parent' => array(
          'node' => node_load($parent_nids),
          'instructions' => array(),
        ),
        'children' => array(),
      );
    }
    
    // Re-arrange children
    foreach ($all_children as &$child) {

      $parent_nid = $child['node']->{$field_to_parent}['und'][0]['target_id'];
      $children[$parent_nid]['children'] []= $child;

    }
    
    $all_children = $children;
  
}

function _olcapi_compare_morpheme($a, $b) {

  $a_text = $a['node']->field_morpheme['und'][0]['safe_value'];
  $b_text = $b['node']->field_morpheme['und'][0]['safe_value'];

  $col = new Collator('');

  return $col->compare($a_text, $b_text);

}

function _olcapi_compare_weights($a, $b) {
  
  $LT = -1;
  $EQ = 0;
  $GT = 1;
  
  if (isset($a['node']->field_weight['und'][0]['value'])) {
    $a_weight = $a['node']->field_weight['und'][0]['value'];
  }
  else {
    $a_weight = NULL;
  }
  
  if (isset($b['node']->field_weight['und'][0]['value'])) {
    $b_weight = $b['node']->field_weight['und'][0]['value'];
  }
  else {
    $b_weight = NULL;
  }
  
  if ($a_weight === $b_weight) {
    return $EQ;
  }
  elseif ($a_weight === NULL) {
    return $LT;
  }
  elseif ($b_weight === NULL) {
    return $GT;
  }
  else {
    return ($a_weight < $b_weight) ? $LT : $GT; 
  }
  
}

function _olcapi_compare_parent_weights($a, $b) {

  return _olcapi_compare_weights($a['parent'], $b['parent']);

}

function _olcapi_compare_gender($a, $b) {

  $a_text = $a['node']->field_gender['und'][0]['value'];
  $b_text = $b['node']->field_gender['und'][0]['value'];

  $col = new Collator('');

  return $col->compare($a_text, $b_text);

}

function _olcapi_compare_parent_gender($a, $b) {

  return _olcapi_compare_gender($a['parent'], $b['parent']);

}

function _olcapi_compare_conversation_parents($a, $b) {

  $gender_cmp = _olcapi_compare_parent_gender($a, $b);
  if ($gender_cmp == 0) {

    $weight_cmp = _olcapi_compare_parent_weights($a, $b);
    return $weight_cmp;

  }
  else {
    return $gender_cmp;
  }

}
function _olcapi_compare_conversation_turns($a, $b) {

  $LT = -1;
  $EQ = 0;
  $GT = 1;

  $weight_cmp = _olcapi_compare_weights($a, $b);

  if ($weight_cmp == $EQ) {

    $nid_cmp = $a['node']->nid < $b['node']->nid ? $LT: $GT;
    return $nid_cmp;

  }
  else {
    return $weight_cmp;
  }

}

function _olcapi_instruction_nodes($for_nid) {

  $instructions = array();
  $instruct_result = _olcapi_query_content_instruction_nodes($for_nid);

  foreach ($instruct_result as $instruct_nid) {

    $instructions []= node_load($instruct_nid->nid);

  }

    return $instructions;

}

function _olcapi_compare_nids_by_node_weight ($a, $b) {

  return _olcapi_compare_weights(

    array('node' => node_load($a)), 
    array('node' => node_load($b))

  );

}

